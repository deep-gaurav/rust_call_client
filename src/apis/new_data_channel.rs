/*
 * Cloudflare Calls API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{
    apis::ResponseContent,
    models::{self, track_object::Location},
};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`apps_app_id_sessions_session_id_tracks_new_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsAppIdSessionsSessionIdDataChannelNewPostError {
    UnknownValue(serde_json::Value),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DataChannel {
    pub location: Location,
    #[serde(rename = "sessionId", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    #[serde(rename = "dataChannelName")]
    pub data_channel_name: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NewDataChannelReqBody {
    #[serde(rename = "dataChannels")]
    pub data_channels: Vec<DataChannel>,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, PartialOrd)]
pub struct DataChannelRes {
    pub location: Location,
    pub id: u32,
    #[serde(rename = "dataChannelName")]
    pub data_channel_name: String,
}

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DatachannelResponse {
    #[serde(rename = "dataChannels", skip_serializing_if = "Option::is_none")]
    pub data_channels: Option<Vec<DataChannelRes>>,
}

pub async fn apps_app_id_sessions_session_id_datachannel_new_post(
    configuration: &configuration::Configuration,
    app_id: &str,
    session_id: &str,
    data_channel_req: NewDataChannelReqBody,
) -> Result<DatachannelResponse, Error<AppsAppIdSessionsSessionIdDataChannelNewPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/apps/{appId}/sessions/{sessionId}/datachannels/new",
        local_var_configuration.base_path,
        appId = crate::apis::urlencode(app_id),
        sessionId = crate::apis::urlencode(session_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&data_channel_req);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsAppIdSessionsSessionIdDataChannelNewPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
